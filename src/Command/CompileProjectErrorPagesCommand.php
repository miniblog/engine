<?php

declare(strict_types=1);

namespace Miniblog\Engine\Command;

use DanBettles\Marigold\TemplateEngine\Engine;
use RuntimeException;

use function file_put_contents;

use const false;
use const PHP_EOL;

/**
 * Compiles the error pages for the project.  This command should be run every time the config is changed.
 */
class CompileProjectErrorPagesCommand extends AbstractCommand
{
    /**
     * @var string
     */
    public const COMMAND_NAME = 'compile-project-error-pages';

    /**
     * @var string[]
     */
    private const ERROR_PAGES = [
        '_errors/error_404.html.php' => 'templates/compiled/error_404.html',
        '_errors/error.html.php' => 'templates/compiled/error.html',
    ];

    /**
     * @throws RuntimeException If it failed to create a file.
     */
    public function __invoke(): int
    {
        /** @var array<string,string> */
        $config = $this->getRegistry()->get('config');
        $comment = "<!-- N.B. File generated by `{$this->getScriptName()}` -->";
        /** @var Engine */
        $templateEngine = $this->getRegistry()->get('templateEngine');

        foreach (self::ERROR_PAGES as $templateFileRelPath => $compiledPageProjectRelPathname) {
            $compiledPageAbsPathname = "{$config['projectDir']}/{$compiledPageProjectRelPathname}";

            $html = $comment . PHP_EOL . $templateEngine->render($templateFileRelPath);
            $fpcResult = file_put_contents($compiledPageAbsPathname, $html);

            if (false === $fpcResult) {
                throw new RuntimeException("Failed to create file `{$compiledPageAbsPathname}`.");
            }
        }

        return self::SUCCESS;
    }
}
